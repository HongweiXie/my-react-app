{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MAPBOX_TOKEN","process","MapboxAccessToken","mapboxgl","accessToken","alpha","gamma","vLongitude","vLatitude","vZoom","mapboxBuildingLayer","id","source","filter","type","zoom","minZoom","maxZoom","paint","DATA_URL","ambientLight","AmbientLight","color","intensity","pointLight","PointLight","position","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","material","ambient","diffuse","shininess","specularColor","effects","LightingEffect","groundColor","TRIP_PARAM","COLOR_RANGE","HM_PARAM","INITIAL_VIEW_STATE","landCover","App","data","buildings","trips","mapStyle","trailLength","theme","loopLength","animationSpeed","threshold","radiusPixels","colorRange","useState","time","setTime","animation","latitude","longitude","bearing","pitch","initialViewState","setInitialViewState","animate","t","viewState","window","requestAnimationFrame","useEffect","cancelAnimationFrame","mapRef","useRef","deckRef","onMapLoad","useCallback","map","current","getMap","deck","hm_layer","MapboxLayer","HeatmapLayer","pickable","getPosition","d","getWeight","addLayer","layers","PolygonLayer","getPolygon","f","stroked","getFillColor","TripsLayer","getPath","path","getTimestamps","timestamps","getColor","vendor","opacity","widthMinPixels","rounded","currentTime","antialiase","shadowEnabled","ref","controller","onViewStateChange","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","onLoad","addEventListener","orientData","beta","Math","abs","min","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d003cf7d.chunk.js","sourcesContent":["/* global window */\n\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport DeckGL from '@deck.gl/react';\nimport {PolygonLayer, ScatterplotLayer} from '@deck.gl/layers';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\nimport mapboxgl from 'mapbox-gl';\nimport {MapboxLayer} from '@deck.gl/mapbox';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = process.env.MapboxAccessToken || 'pk.eyJ1Ijoic2h1b2ZhbiIsImEiOiJja2NlZ3BoOWUwODYwMnpwaGpkamx0aGJmIn0.rkJY6OYlU7c7F0rFsafapQ'; // eslint-disable-line\n\nmapboxgl.accessToken = MAPBOX_TOKEN\n\nconst mapboxBuildingLayer = {\n  id: '3d-buildings',\n  source: 'composite',\n  'source-layer': 'building',\n  filter: ['==', 'extrude', 'true'],\n  type: 'fill-extrusion',\n  zoom: 10,\n  minZoom: 1,\n  maxZoom: 25,\n  paint: {\n    'fill-extrusion-color': '#4a5057',\n    'fill-extrusion-height': ['get', 'height']\n  }\n};\n\n// Source data CSV\nconst DATA_URL = {\n  BUILDINGS: 'res/buildings.json', // eslint-disable-line\n  TRIPS: 'res/trips-v7.json', // eslint-disable-line\n  PICK_HEATMAPS: 'res/uber-pickup-locations.json'\n};\n\nconst ambientLight = new AmbientLight({ \n  color: [255, 255, 255],\n  intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [-74.05, 40.7, 8000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [60, 64, 70]\n};\n\nconst DEFAULT_THEME = {\n  // trailColor0: [253, 128, 93],\n  // trailColor1: [23, 184, 190],\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 240, 110],\n  material,\n  effects: [lightingEffect],\n  groundColor: [0, 0, 0, 0]\n};\n\nconst TRIP_PARAM = {\n  trailLength: 180,\n\n}\n\n// params for heatmap\nconst COLOR_RANGE = [\n  [1, 152, 189, 80],\n  [73, 227, 206, 80],\n  [216, 254, 181, 80],\n  [254, 237, 177, 80],\n  [254, 173, 84, 80],\n  [209, 55, 78, 80]\n  // [255, 255, 178, 100],\n  // [254, 217, 118, 100],\n  // [254, 178, 76, 100],\n  // [253, 141, 60, 100],\n  // [240, 59, 32, 100],\n  // [189, 0, 38, 100]\n];\n\nconst HM_PARAM = {\n  intensity: 1,\n  threshold: 0.03,\n  radiusPixels: 50\n}\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -74,\n  latitude: 40.72,\n  zoom: 13,\n  minZoom: 1,\n  maxZoom: 25,\n  pitch: 65,\n  bearing: 20\n};\n\nconst landCover = [[[-74.0, 40.7], [-74.02, 40.7], [-74.02, 40.72], [-74.0, 40.72]]];\nvar alpha, beta, gamma;\nvar vLongitude, vLatitude, vZoom;\nvLongitude= INITIAL_VIEW_STATE.longitude;\nvLatitude = INITIAL_VIEW_STATE.latitude;\nvZoom = INITIAL_VIEW_STATE.zoom;\nwindow.addEventListener(\"deviceorientation\", handleOrientation, true);\n  function handleOrientation(orientData) {\n    // var absolute = orientData.absolute;\n    alpha = orientData.alpha;\n    beta = orientData.beta;\n    alpha = -alpha+360\n    gamma = orientData.gamma;\n    gamma = Math.abs(gamma)\n    gamma = Math.min(gamma,60)\n    // console.log(gamma);\n  }\n\nexport default function App({\n                              data=DATA_URL.PICK_HEATMAPS,\n                              buildings = DATA_URL.BUILDINGS,\n                              trips = DATA_URL.TRIPS,\n                              mapStyle = 'mapbox://styles/mapbox/dark-v9',\n                              trailLength = TRIP_PARAM.trailLength,\n                              theme = DEFAULT_THEME,\n                              loopLength = 1800, // unit corresponds to the timestamp in source data\n                              animationSpeed = 1,\n                              intensity = HM_PARAM.intensity,\n                              threshold = HM_PARAM.threshold,\n                              radiusPixels = HM_PARAM.radiusPixels,\n                              colorRange = COLOR_RANGE\n                            }) {\n  const [time, setTime] = useState(0);\n\n  const [animation] = useState({});\n  const [initialViewState, setInitialViewState] = useState({\n    latitude: INITIAL_VIEW_STATE.latitude,\n    longitude: INITIAL_VIEW_STATE.longitude,\n    zoom: INITIAL_VIEW_STATE.zoom,\n    bearing: INITIAL_VIEW_STATE.bearing,\n    pitch: INITIAL_VIEW_STATE.pitch,\n  });\n\n  const animate = () => {\n    // setTime(t=>(console.log(t)));\n    setTime(t => (t + animationSpeed) % loopLength);\n    setInitialViewState(viewState => ({\n      ...viewState,\n      longitude: vLongitude,\n      latitude: vLatitude,\n      zoom : vZoom,\n      bearing: alpha,\n      pitch: gamma\n    }));\n    // console.log(time);\n    animation.id = window.requestAnimationFrame(animate);\n  };\n\n  useEffect(\n    () => {\n      animation.id = window.requestAnimationFrame(animate);\n      return () => window.cancelAnimationFrame(animation.id);\n    },\n    [animation]\n  );\n\n  const mapRef = useRef(null);\n  const deckRef =useRef(null);\n  const onMapLoad = useCallback(() => {\n    const map = mapRef.current.getMap();\n    const deck = deckRef.current.deck;\n\n    const hm_layer = new MapboxLayer({\n      data,\n      type: HeatmapLayer,\n      id: 'heatmp-layer',\n      pickable: true,\n      getPosition: d => [d[0], d[1]],\n      getWeight: d => d[2],\n      radiusPixels,\n      intensity,\n      threshold,\n      colorRange\n    }, deck)\n    map.addLayer(mapboxBuildingLayer);\n    map.addLayer(hm_layer);\n    // map.addLayer(ground_layer);\n    // map.addLayer(trip_layer);\n  }, []);\n\n  const layers = [\n    // // This is only needed when using shadow effects\n    new PolygonLayer({\n      id: 'ground',\n      data: landCover,\n      getPolygon: f => f,\n      stroked: false,\n      getFillColor: DEFAULT_THEME.groundColor\n    }),\n    new TripsLayer({\n      id: 'trips',\n      data: trips,\n      getPath: d => d.path,\n      getTimestamps: d => d.timestamps,\n      getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n      opacity: 0.3,\n      widthMinPixels: 2,\n      rounded: true,\n      trailLength,\n      currentTime: time,\n      antialiase: true,\n      shadowEnabled: false\n    }),\n    // new PolygonLayer({\n    //   id: 'buildings',\n    //   data: buildings,\n    //   extruded: true,\n    //   wireframe: false,\n    //   opacity: 0.5,\n    //   getPolygon: f => f.polygon,\n    //   getElevation: f => f.height,\n    //   getFillColor: theme.buildingColor,\n    //   material: theme.material\n    // }),\n  ];\n\n  return (\n    <DeckGL\n      ref={deckRef}\n      layers={layers}\n      effects={theme.effects}\n      initialViewState={initialViewState}\n      controller={true}\n      onViewStateChange = {({viewState}) => {\n        // console.log(viewState);\n        vLongitude = viewState.longitude\n        vLatitude = viewState.latitude\n        vZoom = viewState.zoom\n      }}\n      // onWebGLInitialized={setGLContext}\n      // glOptions={{\n      //   /* To render vector tile polygons correctly */\n      //   stencil: true\n      // }}\n    >\n      {/* {glContext && ( */}\n      <StaticMap\n        reuseMaps\n        ref={mapRef}\n        mapStyle={mapStyle}\n        preventStyleDiffing={true}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n        onLoad={onMapLoad}\n      />\n      {/* )} */}\n    </DeckGL>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}